package main.java.com.coffeevanapp;

import main.java.com.coffeevanapp.model.entities.*;
import main.java.com.coffeevanapp.utils.SortedByPriceParser;
import main.java.com.coffeevanapp.enums.CoffeeType;
import main.java.com.coffeevanapp.exceptions.ZeroQuantityException;

import javax.xml.bind.JAXB;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import java.io.File;
import java.util.List;

/**
 * Created by daria on 30.04.17.
 */
public class CoffeeVanApp {

    private static final int CHOSEN_VAN_ID = 1;
    private static final int OUT_OF_STOCK_VAN_ID = 2;
    private static final int AVAILABLE_SUM = 5000;
    private static final int MIN_SEARCH_PRICE = 150;
    private static final int MAX_SEARCH_PRICE = 250;
    private static int chosenVanCapacity;
    private static final CoffeeType COFFEE_TYPE_FOR_SEARCH = CoffeeType.GROUND;

    private static class Parameters {
        @XmlElement(name = "coffeeItem")
        public List<CoffeeParams> coffeeParams;
        @XmlElement(name = "vanItem")
        public List<VanParams> vanParams;

        public void parseCoffeeParamsIntoStore (Store store) {

            /** read parameters from xml file
             * to create Coffee instances*/

            for (CoffeeParams coffeeParams : this.coffeeParams) {
                Coffee coffee = new Coffee(CoffeeType.valueOf(coffeeParams.coffeeType), coffeeParams.coffeeVariety,
                        coffeeParams.price, coffeeParams.quantityInStore);
                store.storeObjects(coffee);
            }
        }

        public void parseVanParamsIntoVanPark (VanPark vanPark) {
            /** read parameters from xml file
             * to create Van instances*/
            for (VanParams vanParams : this.vanParams) {
                Van van = new Van(vanParams.capacity, vanParams.quantity);
                vanPark.storeObjects(van);
            }
        }
    }
    private static class CoffeeParams {
        @XmlAttribute
        String coffeeType;
        @XmlAttribute
        String coffeeVariety;
        @XmlAttribute
        double price;
        @XmlAttribute
        int quantityInStore;

    }

    private static class VanParams {
        @XmlAttribute
        int capacity;
        @XmlAttribute
        int quantity;
    }


    public static void main(String[] args) {
        Store store = new Store();
        VanPark vanPark = new VanPark();

        Parameters parameters = JAXB.unmarshal(new File("params.xml"), Parameters.class);
        parameters.parseCoffeeParamsIntoStore(store);
        parameters.parseVanParamsIntoVanPark(vanPark);

        System.out.println("This is the main.java.com.coffeevanapp.model.entities.Coffee main.java.com.coffeevanapp.model.entities.Van program demonstration.\n");
        System.out.println("\n Let's see which kinds of coffee we have in our store.\n");
        store.displayObjects();

        System.out.println("\n And these are the vans that we have in our park.\n");
        vanPark.displayObjects();

        System.out.println("\n Let's choose the van that is out of stock to invoke an exception.\n");

        try {
            chosenVanCapacity = vanPark.chooseVan(OUT_OF_STOCK_VAN_ID);
        }
        catch (ZeroQuantityException e) {
            System.out.println("Exception: " + e);
        }

        System.out.println("\n Now let's choose van #1 to fill it with coffee.\n");

        try {
            chosenVanCapacity = vanPark.chooseVan(CHOSEN_VAN_ID);

            CoffeeVan coffeeVan = new CoffeeVan(store.getCoffeeSet(), chosenVanCapacity);

            SortedByPriceParser parser = new SortedByPriceParser();

            System.out.println("\n This message is generated by SortedByPrice annotation: \n");
            parser.parse(CoffeeVan.class);

            System.out.println("\n Let's fill our van with available kinds of coffee for 5000 rubles. \n");
            coffeeVan.fillVan(AVAILABLE_SUM);

            System.out.println("\n This is what we have now in our van: \n");
            coffeeVan.displayObjects();

            System.out.println("\n Applying filter by coffee type: \n");
            coffeeVan.filterByCoffeeType();
            coffeeVan.displayObjects();

            System.out.println("\n Searching for coffee that costs between 200 and 250 rubles: \n");
            coffeeVan.searchByPrice(MIN_SEARCH_PRICE, MAX_SEARCH_PRICE);

            System.out.println("\n Searching for ground coffee: \n");
            coffeeVan.searchByCoffeeType(COFFEE_TYPE_FOR_SEARCH);
        }
        catch (ZeroQuantityException e) {
            System.out.println("Exception: " + e);
        }

    }

}
